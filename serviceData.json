{
  "serviceTypes": {
    "org.myrobotlab.service.Adafruit16CServoDriver": {
      "name": "org.myrobotlab.service.Adafruit16CServoDriver",
      "description": "AdaFruit 16-channel 12-bit PWM/servo driver - I2C interface",
      "dependencies": [
        "gnu.io.rxtx",
        "cc.arduino",
        "com.adafruit.servodriver"
      ]
    },
    "org.myrobotlab.service.AdafruitMotorShield": {
      "name": "org.myrobotlab.service.AdafruitMotorShield",
      "description": "Adafruit Motor Shield for Arduino",
      "dependencies": [
        "gnu.io.rxtx",
        "cc.arduino",
        "com.adafruit.motorshield"
      ]
    },
    "org.myrobotlab.service.Arduino": {
      "name": "org.myrobotlab.service.Arduino",
      "description": "The Arduino service is used to communicate and control the very popular Arduino micro-controller",
      "dependencies": [
        "gnu.io.rxtx",
        "org.fife.autocomplete",
        "org.fife.rsyntaxtextarea",
        "cc.arduino"
      ]
    },
    "org.myrobotlab.service.AudioCapture": {
      "name": "org.myrobotlab.service.AudioCapture",
      "description": "captures audio for playback"
    },
    "org.myrobotlab.service.AudioFile": {
      "name": "org.myrobotlab.service.AudioFile",
      "description": "plays audio files",
      "dependencies": [
        "javazoom.jl.player"
      ]
    },
    "org.myrobotlab.service.BeagleBoardBlack": {
      "name": "org.myrobotlab.service.BeagleBoardBlack",
      "description": "service beagle board black to interface with GPIO"
    },
    "org.myrobotlab.service.ChessGame": {
      "name": "org.myrobotlab.service.ChessGame",
      "description": "chess game engine",
      "dependencies": [
        "org.op.chess"
      ]
    },
    "org.myrobotlab.service.CleverBot": {
      "name": "org.myrobotlab.service.CleverBot",
      "description": "interface to CleverBot JaberWacky and PandoraBots",
      "dependencies": [
        "com.googlecode.chatterbot"
      ]
    },
    "org.myrobotlab.service.Clock": {
      "name": "org.myrobotlab.service.Clock",
      "description": "general clock and event producer"
    },
    "org.myrobotlab.service.Cortex": {
      "name": "org.myrobotlab.service.Cortex",
      "description": "visual processing and memory",
      "dependencies": [
        "com.googlecode.javacv",
        "net.sourceforge.opencv"
      ]
    },
    "org.myrobotlab.service.Cron": {
      "name": "org.myrobotlab.service.Cron",
      "description": "general clock and event producer - cron syntax",
      "dependencies": [
        "it.sauronsoftware.cron4j"
      ]
    },
    "org.myrobotlab.service.GUIService": {
      "name": "org.myrobotlab.service.GUIService",
      "description": "a swing graphical user interface for MyRobotLab"
    },
    "org.myrobotlab.service.GestureRecognition": {
      "name": "org.myrobotlab.service.GestureRecognition",
      "description": "uses OpenNI NITE for tracking gestures",
      "dependencies": [
        "com.googlecode.simpleopenni"
      ]
    },
    "org.myrobotlab.service.GoogleSTT": {
      "name": "org.myrobotlab.service.GoogleSTT",
      "description": "uses OpenNI NITE for tracking gestures",
      "dependencies": [
        "javaFlacEncoder.FLAC_FileEncoder",
        "org.tritonus.share.sampled.floatsamplebuffer"
      ]
    },
    "org.myrobotlab.service.HTTPClient": {
      "name": "org.myrobotlab.service.HTTPClient",
      "description": "service to retrieve internet content",
      "dependencies": [
        "org.apache.commons.httpclient"
      ]
    },
    "org.myrobotlab.service.Houston": {
      "name": "org.myrobotlab.service.Houston",
      "description": "control service for Houston robot project",
      "dependencies": [
        "org.apache.commons.httpclient",
        "javax.speech.recognition",
        "com.googlecode.javacv",
        "net.sourceforge.opencv",
        "edu.cmu.sphinx",
        "gnu.io.rxtx",
        "cc.arduino",
        "com.googlecode.simpleopenni",
        "com.sun.java3d"
      ]
    },
    "org.myrobotlab.service.IPCamera": {
      "name": "org.myrobotlab.service.IPCamera",
      "description": "service to control and retrieve a video feed from a ip camera. Foscam cameras currently supported",
      "dependencies": [
        "com.googlecode.javacv"
      ]
    },
    "org.myrobotlab.service.InMoov": {
      "name": "org.myrobotlab.service.InMoov",
      "description": "service to control the InMoov robot",
      "dependencies": [
        "com.sun.speech.freetts",
        "org.apache.commons.httpclient",
        "javax.speech.recognition",
        "com.googlecode.javacv",
        "net.sourceforge.opencv",
        "edu.cmu.sphinx",
        "gnu.io.rxtx",
        "cc.arduino",
        "com.googlecode.simpleopenni",
        "javazoom.jl.player",
        "org.jivesoftware.smack"
      ]
    },
    "org.myrobotlab.service.InMoovArm": {
      "name": "org.myrobotlab.service.InMoovArm",
      "description": "service to control the InMoov robot",
      "dependencies": [
        "com.sun.speech.freetts",
        "org.apache.commons.httpclient",
        "javax.speech.recognition",
        "com.googlecode.javacv",
        "net.sourceforge.opencv",
        "edu.cmu.sphinx",
        "gnu.io.rxtx",
        "cc.arduino",
        "com.googlecode.simpleopenni",
        "javazoom.jl.player",
        "org.jivesoftware.smack"
      ]
    },
    "org.myrobotlab.service.InMoovHand": {
      "name": "org.myrobotlab.service.InMoovHand",
      "description": "service to control the InMoov robot",
      "dependencies": [
        "com.sun.speech.freetts",
        "org.apache.commons.httpclient",
        "javax.speech.recognition",
        "com.googlecode.javacv",
        "net.sourceforge.opencv",
        "edu.cmu.sphinx",
        "gnu.io.rxtx",
        "cc.arduino",
        "com.googlecode.simpleopenni",
        "javazoom.jl.player",
        "org.jivesoftware.smack"
      ]
    },
    "org.myrobotlab.service.InMoovHead": {
      "name": "org.myrobotlab.service.InMoovHead",
      "description": "service to control the InMoov robot",
      "dependencies": [
        "com.sun.speech.freetts",
        "org.apache.commons.httpclient",
        "javax.speech.recognition",
        "com.googlecode.javacv",
        "net.sourceforge.opencv",
        "edu.cmu.sphinx",
        "gnu.io.rxtx",
        "cc.arduino",
        "com.googlecode.simpleopenni",
        "javazoom.jl.player",
        "org.jivesoftware.smack"
      ]
    },
    "org.myrobotlab.service.InverseKinematics": {
      "name": "org.myrobotlab.service.InverseKinematics",
      "description": "Service to calculate InverseKinematics of a 2 joints robot arm, on a rotating base"
    },
    "org.myrobotlab.service.JFugue": {
      "name": "org.myrobotlab.service.JFugue",
      "description": "music and tone generation service",
      "dependencies": [
        "org.jfugue.music"
      ]
    },
    "org.myrobotlab.service.Java": {
      "name": "org.myrobotlab.service.Java",
      "description": "Java IDE",
      "dependencies": [
        "org.drjava.java",
        "com.strobel.decompiler"
      ]
    },
    "org.myrobotlab.service.Joystick": {
      "name": "org.myrobotlab.service.Joystick",
      "description": "general joystick and gamepad service",
      "dependencies": [
        "net.java.games.jinput"
      ]
    },
    "org.myrobotlab.service.Keyboard": {
      "name": "org.myrobotlab.service.Keyboard",
      "description": "a service which allows capture and transmission of keyboard events (keystrokes)"
    },
    "org.myrobotlab.service.Log": {
      "name": "org.myrobotlab.service.Log",
      "description": "a service capable of logging framework messages"
    },
    "org.myrobotlab.service.Motor": {
      "name": "org.myrobotlab.service.Motor",
      "description": "A general purpose Motor service"
    },
    "org.myrobotlab.service.MouthControl": {
      "name": "org.myrobotlab.service.MouthControl",
      "description": "allows control of a mouth based on text said"
    },
    "org.myrobotlab.service.OpenCV": {
      "name": "org.myrobotlab.service.OpenCV",
      "description": "The OpenCV Service is a library of vision functions",
      "dependencies": [
        "com.googlecode.javacv",
        "net.sourceforge.opencv"
      ]
    },
    "org.myrobotlab.service.OpenNI": {
      "name": "org.myrobotlab.service.OpenNI",
      "description": "service to provide OpenNI methods such as depth cloud and skeleton tracking",
      "dependencies": [
        "com.googlecode.simpleopenni"
      ]
    },
    "org.myrobotlab.service.PID": {
      "name": "org.myrobotlab.service.PID",
      "description": "service used to control other systems with PID"
    },
    "org.myrobotlab.service.ParallelPort": {
      "name": "org.myrobotlab.service.ParallelPort",
      "description": "general parallel port control service",
      "dependencies": [
        "gnu.io.rxtx"
      ]
    },
    "org.myrobotlab.service.PickToLight": {
      "name": "org.myrobotlab.service.PickToLight",
      "description": "pick to light controller",
      "dependencies": [
        "org.apache.commons.httpclient",
        "com.pi4j.pi4j"
      ]
    },
    "org.myrobotlab.service.Plantoid": {
      "name": "org.myrobotlab.service.Plantoid",
      "description": "Plantoid robotics",
      "dependencies": [
        "com.sun.speech.freetts",
        "org.apache.commons.httpclient",
        "javax.speech.recognition",
        "com.googlecode.javacv",
        "net.sourceforge.opencv",
        "edu.cmu.sphinx",
        "gnu.io.rxtx",
        "cc.arduino",
        "com.googlecode.simpleopenni",
        "javazoom.jl.player"
      ]
    },
    "org.myrobotlab.service.PointCloud": {
      "name": "org.myrobotlab.service.PointCloud",
      "description": "Uses OpenNI to generated a 3D pointcloud, will be useful in SLAM",
      "dependencies": [
        "com.googlecode.simpleopenni",
        "com.sun.java3d"
      ]
    },
    "org.myrobotlab.service.Propeller": {
      "name": "org.myrobotlab.service.Propeller",
      "description": "service for the Propeller micro-controller",
      "dependencies": [
        "gnu.io.rxtx"
      ]
    },
    "org.myrobotlab.service.Python": {
      "name": "org.myrobotlab.service.Python",
      "description": "scripting engine and IDE. All services are controllable through Python.",
      "dependencies": [
        "org.python.core"
      ]
    },
    "org.myrobotlab.service.RasPi": {
      "name": "org.myrobotlab.service.RasPi",
      "description": "a service to allow access to the Raspberry Pi's GPIO and I2C offered in Pi4J",
      "dependencies": [
        "com.pi4j.pi4j"
      ]
    },
    "org.myrobotlab.service.RemoteAdapter": {
      "name": "org.myrobotlab.service.RemoteAdapter",
      "description": "allows connectivity to multiple instances of MyRobotLab. Allows peer to peer service sharing"
    },
    "org.myrobotlab.service.Roomba": {
      "name": "org.myrobotlab.service.Roomba",
      "description": "allows MyRobotLab to connect and control a Roomba",
      "dependencies": [
        "gnu.io.rxtx"
      ]
    },
    "org.myrobotlab.service.SLAMBad": {
      "name": "org.myrobotlab.service.SLAMBad",
      "description": "3D Simulator based on Simbad",
      "dependencies": [
        "javax.vecmath",
        "com.sun.java3d"
      ]
    },
    "org.myrobotlab.service.Security": {
      "name": "org.myrobotlab.service.Security",
      "description": "provides security for MRL"
    },
    "org.myrobotlab.service.SensorMonitor": {
      "name": "org.myrobotlab.service.SensorMonitor",
      "description": "allows the graphical monitoring of sensor data, similar to the Arduino Oscope"
    },
    "org.myrobotlab.service.Serial": {
      "name": "org.myrobotlab.service.Serial",
      "description": "Serial service: send and recieve serial data into and out of MRL",
      "dependencies": [
        "gnu.io.rxtx"
      ]
    },
    "org.myrobotlab.service.Servo": {
      "name": "org.myrobotlab.service.Servo",
      "description": "allows speed and position control of a Servo"
    },
    "org.myrobotlab.service.Speech": {
      "name": "org.myrobotlab.service.Speech",
      "description": "FreeTTS and Google text to speech service",
      "dependencies": [
        "com.sun.speech.freetts",
        "org.apache.commons.httpclient",
        "javazoom.jl.player"
      ]
    },
    "org.myrobotlab.service.Sphinx": {
      "name": "org.myrobotlab.service.Sphinx",
      "description": "Sphinx speech recognition",
      "dependencies": [
        "javax.speech.recognition",
        "edu.cmu.sphinx"
      ]
    },
    "org.myrobotlab.service.TesseractOCR": {
      "name": "org.myrobotlab.service.TesseractOCR",
      "description": "optical character recognition (OCR) for robots !",
      "dependencies": [
        "net.sourceforge.tess4j",
        "com.sun.jna"
      ]
    },
    "org.myrobotlab.service.ThingSpeak": {
      "name": "org.myrobotlab.service.ThingSpeak",
      "description": "interface to ThingSpeak for data logging and charting"
    },
    "org.myrobotlab.service.TopCodes": {
      "name": "org.myrobotlab.service.TopCodes",
      "description": "Tangible Object Placement Codes",
      "dependencies": [
        "edu.northwestern.topcodes"
      ]
    },
    "org.myrobotlab.service.Tracking": {
      "name": "org.myrobotlab.service.Tracking",
      "description": "vision tracking service",
      "dependencies": [
        "edu.northwestern.topcodes"
      ]
    },
    "org.myrobotlab.service.Twitter": {
      "name": "org.myrobotlab.service.Twitter",
      "description": "Twitter service - it allows to publish and read tweets",
      "dependencies": [
        "org.twitter4j.twitter"
      ]
    },
    "org.myrobotlab.service.VideoStreamer": {
      "name": "org.myrobotlab.service.VideoStreamer",
      "description": "stream video from a video source"
    },
    "org.myrobotlab.service.WebGUI": {
      "name": "org.myrobotlab.service.WebGUI",
      "description": "The new GUI for MRL",
      "dependencies": [
        "com.google.gson",
        "org.java_websocket.websocket"
      ]
    },
    "org.myrobotlab.service.Wii": {
      "name": "org.myrobotlab.service.Wii",
      "description": "service for the Wii controller",
      "dependencies": [
        "wiiuse.wiimote"
      ]
    },
    "org.myrobotlab.service.WolframAlpha": {
      "name": "org.myrobotlab.service.WolframAlpha",
      "description": "service for the WolframAlpha - ask questions get answers",
      "dependencies": [
        "org.apache.commons.httpclient",
        "com.wolfram.alpha"
      ]
    },
    "org.myrobotlab.service.XMPP": {
      "name": "org.myrobotlab.service.XMPP",
      "description": "client xmpp service - will allow a duplex communication without the need of port-forwarding",
      "dependencies": [
        "org.jivesoftware.smack"
      ]
    }
  },
  "categoryTypes": {
    "actuators": {
      "name": "actuators",
      "serviceTypes": [
        "org.myrobotlab.service.Motor",
        "org.myrobotlab.service.Servo"
      ]
    },
    "audio": {
      "name": "audio",
      "serviceTypes": [
        "org.myrobotlab.service.AudioCapture",
        "org.myrobotlab.service.AudioFile",
        "org.myrobotlab.service.JFugue"
      ]
    },
    "display": {
      "name": "display",
      "serviceTypes": [
        "org.myrobotlab.service.GUIService",
        "org.myrobotlab.service.WebGUI",
        "org.myrobotlab.service.VideoStreamer",
        "org.myrobotlab.service.ThingSpeak"
      ]
    },
    "intelligence": {
      "name": "intelligence",
      "serviceTypes": [
        "org.myrobotlab.service.CleverBot",
        "org.myrobotlab.service.ChessGame",
        "org.myrobotlab.service.ProgramAB",
        "org.myrobotlab.service.TesseractOCR",
        "org.myrobotlab.service.WolframAlpha"
      ]
    },
    "microcontroller": {
      "name": "microcontroller",
      "serviceTypes": [
        "org.myrobotlab.service.Arduino",
        "org.myrobotlab.service.BeagleBoardBlack",
        "org.myrobotlab.service.Propeller"
      ]
    },
    "motors": {
          "name": "motors",
          "serviceTypes": [
            "org.myrobotlab.service.Adafruit16CServoDriver",
            "org.myrobotlab.service.AdafruitMotorShield"
          ]
    },
    "network": {
      "name": "network",
      "serviceTypes": [
        "org.myrobotlab.service.RemoteAdapter",
        "org.myrobotlab.service.InMoov"
      ]
    },
    "programming": {
      "name": "programming",
      "serviceTypes": [
        "org.myrobotlab.service.Python",
        "org.myrobotlab.service.Java",
        "org.myrobotlab.service.GUIService"
      ]
    },
    "robots": {
      "name": "robots",
      "serviceTypes": [
        "org.myrobotlab.service.Houston",
        "org.myrobotlab.service.InMoov",
        "org.myrobotlab.service.InMoovArm",
        "org.myrobotlab.service.InMoovHand",
        "org.myrobotlab.service.Plantoid",
        "org.myrobotlab.service.Roomba"
      ]
    },
    "simulators": {
      "name": "simulators",
      "serviceTypes": [
        "org.myrobotlab.service.SLAMBad"
      ]
    },
    "speech recognition": {
      "name": "speech recognition",
      "serviceTypes": [
        "org.myrobotlab.service.Sphinx",
        "org.myrobotlab.service.GoogleSTT"
      ]
    },
    "speech synthesis": {
      "name": "speech synthesis",
      "serviceTypes": [
        "org.myrobotlab.service.Speech"
      ]
    },
    "vision": {
      "name": "vision",
      "serviceTypes": [
        "org.myrobotlab.service.OpenCV",
        "org.myrobotlab.service.OpenNI",
        "org.myrobotlab.service.IPCamera",
        "org.myrobotlab.service.Tracking",
        "org.myrobotlab.service.TopCodes"
      ]
    }
  },
  "dependencyTypes": {
    "be.hogent.tarsos": {
      "org": "be.hogent.tarsos",
      "revision": "1.7",
      "resolved": false,
      "released": true
    },
    "cc.arduino": {
      "org": "cc.arduino",
      "revision": "1.0",
      "resolved": true,
      "released": true
    },
    "com.adafruit.motorshield": {
      "org": "com.adafruit.motorshield",
      "revision": "1.0",
      "resolved": false,
      "released": true
    },
    "com.adafruit.servodriver": {
      "org": "com.adafruit.servodriver",
      "revision": "1.0",
      "resolved": false,
      "released": true
    },
    "com.google.gson": {
      "org": "com.google.gson",
      "revision": "2.2.4",
      "resolved": false,
      "released": true
    },
    "com.googlecode.chatterbot": {
      "org": "com.googlecode.chatterbot",
      "revision": "1.2.1",
      "resolved": false,
      "released": true
    },
    "com.googlecode.javacv": {
      "org": "com.googlecode.javacv",
      "revision": "0.6",
      "resolved": false,
      "released": true
    },
    "com.googlecode.simpleopenni": {
      "org": "com.googlecode.simpleopenni",
      "revision": "1.96",
      "resolved": false,
      "released": true
    },
    "com.pi4j.pi4j": {
      "org": "com.pi4j.pi4j",
      "revision": "0.0.5",
      "resolved": false,
      "released": true
    },
    "com.strobel.decompiler": {
      "org": "com.strobel.decompiler",
      "revision": "0.3.2",
      "resolved": false,
      "released": true
    },
    "com.sun.java3d": {
      "org": "com.sun.java3d",
      "revision": "1.5.1",
      "resolved": false,
      "released": true
    },
    "com.sun.jna": {
      "org": "com.sun.jna",
      "revision": "3.2.2",
      "resolved": false,
      "released": true
    },
    "com.sun.speech.freetts": {
      "org": "com.sun.speech.freetts",
      "revision": "1.2",
      "resolved": false,
      "released": true
    },
    "com.wolfram.alpha": {
      "org": "com.wolfram.alpha",
      "revision": "1.1",
      "resolved": false,
      "released": true
    },
    "edu.cmu.sphinx": {
      "org": "edu.cmu.sphinx",
      "revision": "4-1.0beta6",
      "resolved": false,
      "released": true
    },
    "edu.northwestern.topcodes": {
      "org": "edu.northwestern.topcodes",
      "revision": "1.0",
      "resolved": false,
      "released": true
    },
    "gnu.io.rxtx": {
      "org": "gnu.io.rxtx",
      "revision": "2.1-7r2",
      "resolved": true,
      "released": true
    },
    "it.sauronsoftware.cron4j": {
      "org": "it.sauronsoftware.cron4j",
      "revision": "2.2.5",
      "resolved": false,
      "released": true
    },
    "javaFlacEncoder.FLAC_FileEncoder": {
      "org": "javaFlacEncoder.FLAC_FileEncoder",
      "revision": "0.1",
      "resolved": false,
      "released": true
    },
    "javax.speech.recognition": {
      "org": "javax.speech.recognition",
      "revision": "1.0",
      "resolved": false,
      "released": true
    },
    "javax.vecmath": {
      "org": "javax.vecmath",
      "revision": "1.5.1",
      "resolved": false,
      "released": true
    },
    "javazoom.jl.player": {
      "org": "javazoom.jl.player",
      "revision": "1.0.1",
      "resolved": false,
      "released": true
    },
    "net.java.games.jinput": {
      "org": "net.java.games.jinput",
      "revision": "20120914",
      "resolved": false,
      "released": true
    },
    "net.sourceforge.opencv": {
      "org": "net.sourceforge.opencv",
      "revision": "2.4.6",
      "resolved": false,
      "released": true
    },
    "net.sourceforge.tess4j": {
      "org": "net.sourceforge.tess4j",
      "revision": "1.1",
      "resolved": false,
      "released": true
    },
    "org.apache.commons.httpclient": {
      "org": "org.apache.commons.httpclient",
      "revision": "4.2.5",
      "resolved": false,
      "released": true
    },
    "org.drjava.java": {
      "org": "org.drjava.java",
      "revision": "20120818",
      "resolved": false,
      "released": true
    },
    "org.fife.autocomplete": {
      "org": "org.fife.autocomplete",
      "revision": "2.0.4",
      "resolved": false,
      "released": true
    },
    "org.fife.rsyntaxtextarea": {
      "org": "org.fife.rsyntaxtextarea",
      "revision": "2.0.4.1",
      "resolved": false,
      "released": true
    },
    "org.java_websocket.websocket": {
      "org": "org.java_websocket.websocket",
      "revision": "1.2",
      "resolved": false,
      "released": true
    },
    "org.jfugue.music": {
      "org": "org.jfugue.music",
      "revision": "4.0.3",
      "resolved": false,
      "released": true
    },
    "org.jivesoftware.smack": {
      "org": "org.jivesoftware.smack",
      "revision": "3.3.0",
      "resolved": false,
      "released": true
    },
    "org.op.chess": {
      "org": "org.op.chess",
      "revision": "1.0.0",
      "resolved": false,
      "released": true
    },
    "org.python.core": {
      "org": "org.python.core",
      "revision": "2.5.2",
      "resolved": false,
      "released": true
    },
    "org.tritonus.share.sampled.floatsamplebuffer": {
      "org": "org.tritonus.share.sampled.floatsamplebuffer",
      "revision": "0.3.6",
      "resolved": false,
      "released": true
    },
    "org.twitter4j.twitter": {
      "org": "org.twitter4j.twitter",
      "revision": "3.0.5",
      "resolved": false,
      "released": true
    },
    "ph.com.alexan.aceduino": {
      "org": "ph.com.alexan.aceduino",
      "revision": "1.0",
      "resolved": false,
      "released": true
    },
    "wiiuse.wiimote": {
      "org": "wiiuse.wiimote",
      "revision": "0.12b",
      "resolved": false,
      "released": true
    }
  }
}